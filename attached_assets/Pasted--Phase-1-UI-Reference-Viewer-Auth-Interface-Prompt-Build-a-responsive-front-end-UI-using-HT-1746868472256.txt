🧩 Phase 1: UI – Reference Viewer + Auth Interface
Prompt:

Build a responsive front-end UI using HTML/CSS/JS (or React if preferred).

Pages: Login page, Home page with reference list.

Components:

Login form (username/password).

Reference cards showing: title, link, description, tags, category, thumbnail (image URL or generated).

Filter by category or tags.

Search bar (hook into Fuse.js-style search logic).

Use localStorage to store and retrieve session info (e.g., current user).

Add placeholder “Add Reference” and “Edit” buttons (visible to admin only).

🧠 Phase 2: Backend – JSON DB + Auth Logic
Prompt:

Set up a simple Express.js backend with file-based JSON DB using lowdb.

DB structure:

users.json: store users with hashed passwords.

references.json: store references with UUID, creator, created/updated timestamps, tags, category, description, link, thumbnail.

tags.json, categories.json: store predefined flat lists.

Endpoints:

POST /login: validates against stored users or admin credentials in env.

GET /references: fetch all (supports query params for tag/category/search).

POST /references: add a reference (admin-only).

PUT /references/:id: update a reference (admin-only).

GET /tags, GET /categories: return tag/category lists.

Use uuid, dotenv, bcrypt (optional), and cors.

🔌 Phase 3: Middleware – Bind UI to Backend
Prompt:

Connect the UI to backend APIs via fetch or Axios.

On login:

Send credentials to /login, store session token or user in localStorage.

On homepage load:

Fetch /references, populate UI.

Allow filters and search by updating fetch URL with query params.

If admin:

Enable “Add” / “Edit” actions that open a form and post to /references.

On logout:

Clear localStorage and redirect to login.

(Bonus): Call a thumbnail generator API (e.g., Microlink) if none is provided.

🧪 Phase 4: Polish & Extend
Prompt:

Add basic error handling and user messages (e.g., login failed, save success).

Improve styling (Tailwind CSS or custom styles).

Add pagination or infinite scroll (optional).

Add “created by” and “last updated” display.

Restrict admin routes via middleware on backend and conditionally in UI.

