name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main  # Set your default branch here if it's not 'main'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write  # This is crucial - gives permission to write to the repository
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository üõéÔ∏è
        uses: actions/checkout@v3
        with:
          # We need full history for reference data
          fetch-depth: 0

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies üì¶
        run: npm ci
        
      - name: Export Static Data for GitHub Pages üìä
        run: |
          # Create data directory
          mkdir -p public/data
          
          # Run data export script
          node --experimental-json-modules export-static-data.js
          
          # Verify data files were created
          echo "Exported data files:"
          ls -la public/data/
        
      - name: Build application üèóÔ∏è
        run: npm run build
        
      - name: Prepare for GitHub Pages üîß
        run: |
          # Get repository name from GitHub context
          REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)
          echo "Using repository name: $REPO_NAME"
          
          # Create .nojekyll file
          touch dist/public/.nojekyll
          
          # Ensure data directory exists in the build output
          mkdir -p dist/public/data
          
          # Copy data files to the build output
          if [ -d "public/data" ]; then
            echo "Copying data files from public/data to dist/public/data"
            cp -r public/data/* dist/public/data/
          fi
          
          # Add base tag and fix script to index.html
          ORIGINAL_INDEX="dist/public/index.html"
          
          if [ -f "$ORIGINAL_INDEX" ]; then
            echo "Modifying index.html for GitHub Pages compatibility"
            # Insert base tag for GitHub Pages and spa-github-pages script
            sed -i "s|<head>|<head>\n    <base href=\"/${REPO_NAME}/\">\n    <script type=\"text/javascript\">\n      // Single Page Apps for GitHub Pages\n      // MIT License - https://github.com/rafgraph/spa-github-pages\n      (function(l) {\n        if (l.search[1] === '/' ) {\n          var decoded = l.search.slice(1).split('&').map(function(s) { \n            return s.replace(/~and~/g, '&')\n          }).join('?');\n          window.history.replaceState(null, null,\n              l.pathname.slice(0, -1) + decoded + l.hash\n          );\n        }\n      }(window.location))\n    </script>|" $ORIGINAL_INDEX
          else
            echo "index.html not found in build output. Creating a minimal index.html."
            mkdir -p dist/public
            cat > "$ORIGINAL_INDEX" << 'HTMLFILE'
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reference Viewer</title>
    <base href="/__REPO_NAME__/">
    <script type="text/javascript">
      // Single Page Apps for GitHub Pages
      (function(l) {
        if (l.search[1] === '/' ) {
          var decoded = l.search.slice(1).split('&').map(function(s) { 
            return s.replace(/~and~/g, '&')
          }).join('?');
          window.history.replaceState(null, null,
              l.pathname.slice(0, -1) + decoded + l.hash
          );
        }
      }(window.location))
    </script>
    <style>
      body { font-family: -apple-system, system-ui, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }
      .card { border: 1px solid #ddd; border-radius: 8px; padding: 20px; margin: 20px 0; }
      h1 { color: #4338ca; }
    </style>
  </head>
  <body>
    <h1>Reference Viewer</h1>
    <div class="card">
      <p>Loading references from JSON data...</p>
      <div id="references"></div>
    </div>
    <script>
      fetch('./data/references.json')
        .then(response => response.json())
        .then(data => {
          const container = document.getElementById('references');
          let html = '';
          
          if (data && data.length > 0) {
            data.slice(0, 5).forEach(ref => {
              html += '<div class="card">';
              html += '<h3>' + (ref.title || 'No Title') + '</h3>';
              html += '<p>' + (ref.description || 'No Description') + '</p>';
              html += '<p><a href="' + (ref.link || '#') + '" target="_blank">View Reference</a></p>';
              html += '</div>';
            });
          } else {
            html = '<p>No references found</p>';
          }
          
          container.innerHTML = html;
        })
        .catch(error => {
          document.getElementById('references').innerHTML = 
            '<p>Error loading references. Please try again later.</p>';
        });
    </script>
  </body>
</html>
HTMLFILE
            # Replace placeholder with actual repo name
            sed -i "s/__REPO_NAME__/${REPO_NAME}/g" "$ORIGINAL_INDEX"
          fi
          
          # Create 404.html file for SPA routing
          cat > dist/public/404.html << 'EOL'
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>RefHub - Redirecting</title>
    <script type="text/javascript">
      // Single Page Apps for GitHub Pages
      // MIT License - https://github.com/rafgraph/spa-github-pages
      // This script takes the current url and converts the path and query
      // string into just a query string, and then redirects the browser
      // to the new url with only a query string and hash fragment
      
      // If you're creating a Project Pages site and NOT using a custom domain,
      // then set pathSegmentsToKeep to 1 (enterprise users may need to set it to > 1).
      var pathSegmentsToKeep = 1;

      var l = window.location;
      l.replace(
        l.protocol + '//' + l.hostname + (l.port ? ':' + l.port : '') +
        l.pathname.split('/').slice(0, 1 + pathSegmentsToKeep).join('/') + '/?/' +
        l.pathname.slice(1).split('/').slice(pathSegmentsToKeep).join('/').replace(/&/g, '~and~') +
        (l.search ? '&' + l.search.slice(1).replace(/&/g, '~and~') : '') +
        l.hash
      );
    </script>
  </head>
  <body>
    <h1>Redirecting...</h1>
  </body>
</html>
EOL
          
          echo "‚úÖ GitHub Pages preparation completed successfully"
      
      - name: Deploy to GitHub Pages üöÄ
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages  # The branch the action should deploy to
          folder: dist/public  # The folder the action should deploy
          clean: true  # Automatically remove deleted files from deploy branch
          token: ${{ secrets.PAGES_DEPLOY_TOKEN }}  # Use PAT instead of GITHUB_TOKEN
          
      - name: Output deployment status
        run: |
          echo "üéâ Deployment to GitHub Pages completed!"
          echo "Your site will be available at: https://$(echo $GITHUB_REPOSITORY | cut -d'/' -f1).github.io/$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)/"
          echo "It may take a few minutes for changes to be visible."