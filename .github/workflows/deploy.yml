name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Setup Environment
        run: |
          # Set up custom domain from repository secret or environment variable
          if [[ ! -z "$CUSTOM_DOMAIN" ]]; then
            echo "Using custom domain: $CUSTOM_DOMAIN"
          fi
          
          # Create deploy-test script if it doesn't exist
          if [ ! -f "deploy-test.js" ]; then
            echo "Creating deploy-test.js script..."
            cat > deploy-test.js << 'EOL'
          /**
           * GitHub Pages Deployment Configuration Test Script
           */
          import fs from 'fs';
          import path from 'path';
          import { exec } from 'child_process';
          import { promisify } from 'util';
          import { fileURLToPath } from 'url';

          const execPromise = promisify(exec);
          const __filename = fileURLToPath(import.meta.url);
          const __dirname = path.dirname(__filename);

          const IS_CUSTOM_DOMAIN = process.env.CUSTOM_DOMAIN || '';
          
          async function setupEnvironment() {
            console.log('Setting up deployment environment...');
            
            try {
              // Determine correct base path
              let basePath = '/';
              const repoName = process.env.GITHUB_REPOSITORY?.split('/')[1] || '';
              
              if (!IS_CUSTOM_DOMAIN && repoName && !repoName.endsWith('.github.io')) {
                basePath = `/${repoName}/`;
                console.log(`Using repository path: /${repoName}/`);
              } else {
                console.log('Using root path');
              }
              
              // Create environment config file
              fs.writeFileSync(
                path.join(__dirname, '.env.github-pages'),
                `# Generated configuration for GitHub Pages deployment
          VITE_BASE_PATH=${basePath}
          ${IS_CUSTOM_DOMAIN ? `CUSTOM_DOMAIN=${IS_CUSTOM_DOMAIN}\nVITE_USE_CUSTOM_DOMAIN=true` : ''}
          `
              );
              
              console.log(`Environment configured with base path: ${basePath}${IS_CUSTOM_DOMAIN ? ` and custom domain: ${IS_CUSTOM_DOMAIN}` : ''}`);
              return { basePath };
            } catch (err) {
              console.error(`Failed to set up environment: ${err.message}`);
              throw err;
            }
          }

          setupEnvironment().catch(err => {
            console.error(err);
            process.exit(1);
          });
          EOL
          fi
          
          # Run our deploy-test script to generate the configuration
          node deploy-test.js
          
          # Show the generated configuration
          echo "Generated environment configuration:"
          cat .env.github-pages
      
      - name: Export Static Data
        run: node export-static-data.js
      
      - name: Build
        run: |
          # Read environment settings from our config file
          export $(grep -v '^#' .env.github-pages | xargs)
          echo "Building with BASE_PATH=$VITE_BASE_PATH and CUSTOM_DOMAIN=${CUSTOM_DOMAIN:-none}"
          
          # Run the build with these settings
          npm run build
      
      - name: Setup Deployment Directory
        run: |
          # Check if build directory exists
          if [ ! -d "dist/public" ]; then
            echo "Build directory 'dist/public' not found. Creating empty directory for testing."
            mkdir -p dist/public
            # Create a basic HTML file for testing
            echo "<html><body><h1>Test Build</h1></body></html>" > dist/public/index.html
          fi
          
          # Create deployment directory
          mkdir -p deploy
          cp -r dist/public/* deploy/
          touch deploy/.nojekyll
          
          # Create CNAME file if custom domain is specified
          if [[ ! -z "$CUSTOM_DOMAIN" ]]; then
            echo "$CUSTOM_DOMAIN" > deploy/CNAME
            echo "Created CNAME file for $CUSTOM_DOMAIN"
          fi
      
      - name: Fix HTML Files for Custom Domain
        if: env.CUSTOM_DOMAIN != ''
        run: |
          echo "Fixing HTML files for custom domain deployment..."
          
          # Fix index.html - very aggressive path correction
          sed -i 's/<base href="[^"]*"/<base href="\/"/g' deploy/index.html
          
          # Replace all references to repository path with root path
          REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f 2)
          sed -i "s/\/$REPO_NAME\//\//g" deploy/index.html
          
          # Ensure asset paths have leading slash
          sed -i 's/href="assets\//href="\/assets\//g' deploy/index.html
          sed -i 's/src="assets\//src="\/assets\//g' deploy/index.html
          
          # Fix CSS url() references
          sed -i "s/url(\/$REPO_NAME\//url(\//g" deploy/index.html
          
          # Add custom domain meta tag
          sed -i 's/<\/head>/<meta name="custom-domain" content="true">\n  <\/head>/g' deploy/index.html
          
          echo "Completed HTML fixes for custom domain"
      
      - name: Create 404.html for SPA Routing
        run: |
          cat > deploy/404.html << 'EOL'
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8">
              <title>Redirecting...</title>
              <script>
                // Single Page App redirection
                sessionStorage.setItem('redirect', window.location.pathname);
                window.location.href = '/';
              </script>
            </head>
            <body>
              <h1>Redirecting...</h1>
              <p>If you are not redirected automatically, <a href="/">click here</a>.</p>
            </body>
          </html>
          EOL
      
      - name: Deploy to GitHub Pages
        # Use direct git commands for more reliability
        run: |
          echo "Deploying to GitHub Pages branch..."
          cd deploy
          
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          git init
          git add -A
          git commit -m "Deploy to GitHub Pages"
          
          # Force push to the gh-pages branch
          # Use the properly formatted token URL with proper permissions
          git remote add origin https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}.git
          
          # Debug the URL being used (with token redacted)
          echo "Pushing to remote repository: https://***:***@github.com/${{ github.repository }}.git"
          
          # Force push to the gh-pages branch
          git push -f origin HEAD:gh-pages
          
          echo "âœ… Successfully deployed to GitHub Pages"